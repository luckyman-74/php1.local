<?php

/*Задание №3
--------------
В PHP есть функция var_dump($something), которая выводит подробную информацию о значениях и их типах.
Попробуйте написать что-нибудь вроде var_dump(2*2); чтобы увидеть, как она работает.
Изучите с помощью этой функции следующие выражения:*/

//Возвращает (int 3). Целое число 3, результат вычисления выражения 3/1.
var_dump(3 / 1);

//Возвращает (float 0.33333333333333). Число типа float (число с плавающей точкой), результат вычисления выражения 1/3.
var_dump(1/3);

/*Возвращает (int 60), т.к. арифметический оператор "+" ожидает арифметические операнды и неявно приводит строку '20cats' к целому числу int(20).
Результатом вычисления выражения 20+40 становится целое число 60.*/
var_dump('20cats' + 40);

//Возвращает (int 2). Это целочисленный остаток от деления 18 на 4 (деление по модулю). Результатом вычисления выражения является целое число 2.
var_dump(18 % 4);

/*Задание №4
--------------
Говорят, что в PHP "всё является выражением".
Интересно, что даже присваивание переменной какого-либо значения тоже является выражением!
Изучите примеры ниже и дайте ответ - что же является значением выражения присваивания? */

/*В данном примере, значением выражения присваивания является целое число 2. Это значение присваивается переменной $a.
На экран (в поток) выводится вычисленное значение выражения присваивания, т.е. число 2.*/
echo ($a = 2);
?>
<br>
<?php

/*В данном примере, значением выражения присваивания переменной $y является целое число 12,
а вычесленным значением выражения присвания переменной $x является целое число 4. (12-8=4).
Значение переменной $x (целое число 4) выводится в поток (на экран монитора).*/
$x = ($y = 12) - 8;
echo $x;

/*Задание №5
--------------
В PHP имеется логический (boolean) тип, имеющий два значения - true (истина) и false (ложь).
Изучите с помощью var_dump() следующие выражения и объясните их*/

//boolean true. Оператор "==" - равенство. Т.к. 1=1, возвращается "истина".
var_dump(1 == 1.0);

/*boolean false. Оператор "===" - тождественное равенство.
Проверяется значение и тип. Возвращает "ложь", т.к. число 1 имеет тип int, а число 1.0 имеет тип float.*/
var_dump(1 === 1.0);

/*boolean true. Оператор "==" - равенство. Т.к. существует правило, что при сравнении строки и числом,
осуществляется попытка преобразования строки в число, то наша строка '02' автоматически становится числом.
Наше равенство становится истиным (2=2). */
var_dump('02' == 2);

/*boolean false. Оператор "===" - тождественное равенство.
Возвращает "ложь", т.к. не совпадают типы значений переменных (string и int)*/
var_dump('02' === 2);

/*boolean true. Оператор "==" - равенство.
 Т.к. обе стороны равенства преобразовались "на лету" в целочисленные, равенство 2=2, является истиным.*/
var_dump('02' == '2');


/*Задание №6
--------------
Попробуйте объяснить результат*/

/*Данный пример, с первого взгляда работает неверно, с ошибкой, не так как ожидается...
Казалось бы, вычесленным результатом присвоения переменной $x должно быть значение "false",
т.к. оператор "исключающее или" возвращает истину только в том случае, если истина только у одного значения,
но не у обоих сразу. Мы же имеем true...
Такое поведение наблюдается из-за приоритетов. Так, оператор присвоения "=" имеет более высокий приоритет, чем "xor",
поэтому наш код приобретает вид: ($x = true) xor true; Соответственно, значением переменной $x становится "true".

Чтобы наш код начал работать правильно, достаточно лишь поставить скобки, вот так: $x = (true xor true);
В этом случае, сначала выполнится вычисление значения выражения внутри скобок, а затем это значение присвоится переменной $x.
Таким образом, наш код станет работать, как ожидается.
*/


$x = true xor true;
var_dump($x);


?>